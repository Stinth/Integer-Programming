using JuMP
using GLPK

model = Model(GLPK.Optimizer)
n = 4
c = [14 10 7 4;
    25 19 16 14;
    20 14 11 8]


v = zeros(3,n)
v[1,1] = c[1,1]
v[1,2] = c[1,2]
v[1,3] = c[1,3]
v[1,4] = c[1,4]

v[2,1] = min(v[1,1] + c[2,4], v[1,2] + c[2,3], v[1,3] + c[2,2], v[1,4] + c[2,1])
v[2,2] = min(v[1,1] + c[2,3], v[1,2] + c[2,2], v[1,3] + c[2,1])
v[2,3] = min(v[1,1] + c[2,2], v[1,2] + c[2,1])
v[2,4] = v[1,1] + c[2,1]

v[3,1] = min(v[2,1] + c[3,4], v[2,2] + c[3,3], v[2,3] + c[3,2], v[2,4] + c[3,1])
v[3,2] = min(v[2,1] + c[3,3], v[2,2] + c[3,2], v[2,3] + c[3,1])
v[3,3] = min(v[2,1] + c[3,2], v[2,2] + c[3,1])
v[3,4] = v[2,1] + c[3,1]